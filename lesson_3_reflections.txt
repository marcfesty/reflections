When would you want to use a remote repository rather than keeping all your work
local?

    Remote repositories are good for collaborating with other people as well as having a backup that's readily available to pull.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Pulling changes manually allows you to focus on whatever you're working on without dealing with code that was pushed to the remote by other collaborators. This isolates you're unit of work to the state of your branch on your local machine, and if any bugs arise, you're sure it's only for code you committed to your local. Also, automatically pulling code might not be compatible with the code on your local making it susceptible to break. 

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

    Clones are copies of a git repository on your local or from Github. Forks are clones of other Github user's repository that you want to work on. Branches are labeled commits in the repository that make it easy for the user to checkout and keep track of. 

    Branches are used when you want to make changes to a particular commit and "branching out" of the master branch.

    Clones allow you to copy an entire git repository on your local or from your Github account; whereas Forks are clones of other Github users' repository that you want to work on, but still shows who created it and it prevents any changes to the original source. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known state of the remote allows you to work with the most recent state of the repository at the time it was fetched. This latest copy can even be worked on offline since it's already saved on your local.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    There are other versioning systems available online, but the reason git/github is better is that for each collaborator, a copy of the main repository will always be available. Every directory and file in their local branches serves as a backup of the entire project. 

    A centralized version control system may be used, but it will be much harder to push code and merge to a central repository.


When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here

Extra text - Test from Work Laptop